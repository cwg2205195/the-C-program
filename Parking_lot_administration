#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include "data_struct.h"
int top=-1,side_num=0;
sqlist *front,*rear;//初始化队列
void menu(void);
void show(void);
int enter(void);
void leave(void);
void input(INFO &tmp);
int check(INFO tmp);
int search_car(INFO *stack[],INFO *&tmp);
int push(INFO *tmp);
INFO* pop(INFO *tmp,int p);
int enqueue(INFO *tmp);
INFO* dequeue(void);
int sum(INFO *&in,INFO *&out);
int main()
{
	front=(sqlist*)malloc(sizeof(sqlist)); 
	//rear=(sqlist*)malloc(sizeof(sqlist));
	front->p=NULL;
	front->next=NULL;
	rear=front;
	menu();
	return 0;
}
void show(void)
{
	printf("------------------欢迎使用停车场管理系统------------------\n");
	printf("请选择：\n1 进入 \n2 离开 \n3 退出系统\n");
}

void input(INFO &tmp)
{
	int i;
	memset(&tmp.num,0,MAX);
	memset(&tmp.time,0,MAX);fflush(stdin);fflush(stdout);
	read(STDIN_FILENO,&tmp.num,MAX);
	read(STDIN_FILENO,&tmp.time,MAX);
	for(i=0;i<2*MAX;i++)		//把输入的所有\n转为0 
		if(tmp.num[i]==10)
			tmp.num[i]=0;
}

int check(INFO tmp)
{
	int i;
	if(strlen(tmp.num)==0||strlen(tmp.time)==0) 
		return 0;
	for(i=0;tmp.num[i];i++)
		if(!(isdigit(tmp.num[i]))&&!(isalpha(tmp.num[i])))//既不是数字 也不是字母，车牌输错了 
			{
			//	printf("error occurred! %d=%c\n",tmp.num[i],tmp.num[i]);
				return 0;
			}
	for(i=0;tmp.time[i];i++)
		if(!(isdigit(tmp.time[i])) && tmp.time[i]!=':') //既不是数字 也不是 冒号的时候，时间输错了 
			{
			//	printf("error occurre--! %d=%c\n",tmp.time[i],tmp.time[i]);
				return 0;
			}
	return 1;
}

int enter(void)
{
	INFO *tmp;
	tmp=(INFO*)malloc(sizeof(INFO));
	int flag=0,i;
	printf("enter the parking lot\n");
	printf("输入车牌号 与 时间 ：例如（D87234 14:30）\n");
	input(*tmp);
	while(!(flag=check(*tmp)))
	{
		printf("输入有误，请检查！\n");
		input(*tmp);
	}
	printf("test:num:%s  --- time :%s ---\n",tmp->num,tmp->time);
	//先判断车库是不是满的，满的就把车存入便道 ，输出位置； 否则就把车存入车库，输出位置
	if(top==MAX_CAR_NUM-1) //the parking lot is full ,get the car into temporary parking space 
	{
		if(enqueue(tmp))
			return 1;
		else 
			return 0;
	}
	push(tmp);
	return 1;
}

void leave(void)
{
	INFO *tmp;
	tmp=(INFO*)malloc(sizeof(INFO));
	int flag=0;
	printf("leave the parking lot\n");
	printf("输入车牌号 与 时间 ：例如（D87234 14:30）\n");
	input(*tmp);
	while(!(flag=check(*tmp)))
	{
		printf("输入有误，请检查！\n");
		input(*tmp);
	}
//	printf("leave:num:%s  --- time :%s ---\n",tmp->num,tmp->time);
	if(search_car(stack,tmp)==0)
		printf("没有发现您的车，请检查输入！\n");
}

int search_car(INFO *stack[],INFO *&tmp)
{
	INFO *t;
	int i=top,flag=0;	//从栈顶开始搜索车辆信息，初始化flag=0 为 没有找到这辆车 
	if(top<0)			//一辆车也没有 
		return 0;
	while(i>=0)
	{
		if(!strcmp(stack[i]->num,tmp->num)) //相等即找到车辆 
		{
			flag=1;
			break;
		}
		i--;
	}
	if(!flag)  //没有找到车辆，返回0
		return 0;
	//此时i保存了车辆的位置 
	printf("发现您的车: 车牌号:%s 停车时间:%s \n",stack[i]->num,stack[i]->time);
	t=stack[i];
	// 计算停车时间和停车费用 ,如果输入时间有误，返回0 ,就不用从栈中弹出车辆信息 
	if(sum(t,tmp)==0)
		return 2;
	free(pop(stack[i],i));
	//检查队列是否为空，为空就返回，不然把队首的车辆加入
	if(front->p==NULL)
				return 1;
	t=dequeue();
	for(i=0;i<MAX;i++)		//把时间中间的 冒号恢复 
		if(tmp->time[i]==0)
		{
			tmp->time[i]=':';
			break;
		}
	memcpy(t->time,tmp->time,MAX);
	free(tmp);
	//debug------------------------
	push(t);
	printf("过道的车进入: %s -- %s 您的位置：%d \n",t->num,t->time,top);
}

int sum(INFO *&in,INFO *&out)  //结账成功 返回1 
{
	float h=0,total=0;
	int t,i,hour1,hour2,minute1,minute2;
	//进入车库的时间转换 
	for(i=0;i<MAX;i++)		//找冒号，找到后用0换掉 
		if(in->time[i]==':')
			{
				in->time[i]=0;
				break;
			}
	hour1=atoi(in->time);		//进入车库的小时
	minute1=atoi(&in->time[i+1]);	//进入车库的分钟
	//出车库的时间转换 
	for(i=0;i<MAX;i++)		//找冒号，找到后用0换掉 
		if(out->time[i]==':')
			{
				out->time[i]=0;
				break;
			}
	hour2=atoi(out->time);			//出车库的小时 
	minute2=atoi(&out->time[i+1]);	//出车库的分钟 
	t=hour2*60+minute2-hour1*60-minute1;
	if(t<0)
		{
			printf("时间输入有误，请检查！");
			return 0; 
		}
	h=(float)t/60.0;
	printf("您的停车时间为：%.04f  总计：%.02f 元，谢谢光临！\n",h,h*price);
	return 1;
}

int push(INFO *tmp)
{
	//there is room for the car , get it into the stack
	top++;
	stack[top]=tmp;
	printf("您能停在车位：%d的位置\n",top);
	return 1;
}

INFO* pop(INFO *tmp,int p)
{
	int i=top;
	INFO *ret=stack[p];		//保存退出车辆的信息 
	for(;p<top;p++)
		stack[p]=stack[p+1];
	top--;
	return ret;//返回退出车辆的信息 
}

int enqueue(INFO *tmp) 
{
	sqlist *tm;
	if (front->p==NULL) //队列为空的时候 
		{
			side_num++;
			front->p=tmp;
			printf("您能停在便道：%d的位置\n",side_num);
			return 1;
		}
	tm=(sqlist*)malloc(sizeof(sqlist));
	tm->p=tmp;
	tm->next=rear->next;
	rear->next=tm;
	rear=tm;
	side_num++;
	//queue[rear]=tmp;
	printf("您能停在便道：%d的位置\n",side_num);
	return 1;
}

INFO* dequeue(void)
{
	INFO *t=front->p;
	if(t==NULL) //队列为空，返回null 
		return NULL;
	if(front->p==rear->p)
		front->p=rear->p=NULL;
	else
		front=front->next;	
	side_num--;
	return t;
}

void menu(void)
{
	char choice[2];
	show();
	read(STDIN_FILENO,&choice,2);
	while(*choice!='3')
	{
		if(*choice=='1')
			{
				enter();
				getchar();
				system("cls");
				show();
				read(STDIN_FILENO,&choice,2);
			}
		else if (*choice=='2')
			{
				leave();
				getchar();
				system("cls");
				show();
				read(STDIN_FILENO,&choice,2);
			}
		else
		{
			printf("Input error ! Try again !\n") ;
			fflush(stdin);
			getchar();
			system("cls"); 
			show();
			read(STDIN_FILENO,&choice,2);
		}
	}
}  
